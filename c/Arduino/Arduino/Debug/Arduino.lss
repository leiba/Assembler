
Arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000150  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800100  00800100  000001c4  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  000001c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000890  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00000927  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000047  00000000  00000000  00000947  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000000e2  00000000  00000000  0000098e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000085  00000000  00000000  00000a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000159  00000000  00000000  00000af5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000040  00000000  00000000  00000c50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000092  00000000  00000000  00000c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 0000001e  00000000  00000000  00000d22  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_14>
  3c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__vector_15>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 98 00 	call	0x130	; 0x130 <main>
  88:	0c 94 a6 00 	jmp	0x14c	; 0x14c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_14>:

#define F_CPU 20000000

int a = 0, b = 0;

ISR (TIMER0_COMPA_vect) {
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	2f 93       	push	r18
  9c:	3f 93       	push	r19
  9e:	8f 93       	push	r24
  a0:	9f 93       	push	r25
	if (a++ > 100) {
  a2:	80 91 00 01 	lds	r24, 0x0100
  a6:	90 91 01 01 	lds	r25, 0x0101
  aa:	9c 01       	movw	r18, r24
  ac:	2f 5f       	subi	r18, 0xFF	; 255
  ae:	3f 4f       	sbci	r19, 0xFF	; 255
  b0:	30 93 01 01 	sts	0x0101, r19
  b4:	20 93 00 01 	sts	0x0100, r18
  b8:	85 36       	cpi	r24, 0x65	; 101
  ba:	91 05       	cpc	r25, r1
  bc:	44 f0       	brlt	.+16     	; 0xce <__vector_14+0x3e>
		PORTB ^= (1 << PORTB0);
  be:	95 b1       	in	r25, 0x05	; 5
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	89 27       	eor	r24, r25
  c4:	85 b9       	out	0x05, r24	; 5
		a = 0;
  c6:	10 92 01 01 	sts	0x0101, r1
  ca:	10 92 00 01 	sts	0x0100, r1
	}
}
  ce:	9f 91       	pop	r25
  d0:	8f 91       	pop	r24
  d2:	3f 91       	pop	r19
  d4:	2f 91       	pop	r18
  d6:	0f 90       	pop	r0
  d8:	0f be       	out	0x3f, r0	; 63
  da:	0f 90       	pop	r0
  dc:	1f 90       	pop	r1
  de:	18 95       	reti

000000e0 <__vector_15>:
	
ISR (TIMER0_COMPB_vect) {
  e0:	1f 92       	push	r1
  e2:	0f 92       	push	r0
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	0f 92       	push	r0
  e8:	11 24       	eor	r1, r1
  ea:	2f 93       	push	r18
  ec:	3f 93       	push	r19
  ee:	8f 93       	push	r24
  f0:	9f 93       	push	r25
	if (b++ > 50) {
  f2:	80 91 02 01 	lds	r24, 0x0102
  f6:	90 91 03 01 	lds	r25, 0x0103
  fa:	9c 01       	movw	r18, r24
  fc:	2f 5f       	subi	r18, 0xFF	; 255
  fe:	3f 4f       	sbci	r19, 0xFF	; 255
 100:	30 93 03 01 	sts	0x0103, r19
 104:	20 93 02 01 	sts	0x0102, r18
 108:	83 33       	cpi	r24, 0x33	; 51
 10a:	91 05       	cpc	r25, r1
 10c:	44 f0       	brlt	.+16     	; 0x11e <__vector_15+0x3e>
		PORTB ^= (1 << PORTB1);
 10e:	95 b1       	in	r25, 0x05	; 5
 110:	82 e0       	ldi	r24, 0x02	; 2
 112:	89 27       	eor	r24, r25
 114:	85 b9       	out	0x05, r24	; 5
		b = 0;
 116:	10 92 03 01 	sts	0x0103, r1
 11a:	10 92 02 01 	sts	0x0102, r1
	}	
}
 11e:	9f 91       	pop	r25
 120:	8f 91       	pop	r24
 122:	3f 91       	pop	r19
 124:	2f 91       	pop	r18
 126:	0f 90       	pop	r0
 128:	0f be       	out	0x3f, r0	; 63
 12a:	0f 90       	pop	r0
 12c:	1f 90       	pop	r1
 12e:	18 95       	reti

00000130 <main>:

int main(void)
{
	DDRB = 0xFF;
 130:	8f ef       	ldi	r24, 0xFF	; 255
 132:	84 b9       	out	0x04, r24	; 4
	
	sei();
 134:	78 94       	sei
	TCCR0A = (1 << WGM01);
 136:	82 e0       	ldi	r24, 0x02	; 2
 138:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1 << CS02) | (1 << CS00);
 13a:	85 e0       	ldi	r24, 0x05	; 5
 13c:	85 bd       	out	0x25, r24	; 37
	
	OCR0A  = 195;
 13e:	83 ec       	ldi	r24, 0xC3	; 195
 140:	87 bd       	out	0x27, r24	; 39
	OCR0B  = 195; 
 142:	88 bd       	out	0x28, r24	; 40
	
	TIMSK0 = (1 << OCIE0A) | (1 << OCIE0B);	
 144:	86 e0       	ldi	r24, 0x06	; 6
 146:	80 93 6e 00 	sts	0x006E, r24
 14a:	ff cf       	rjmp	.-2      	; 0x14a <main+0x1a>

0000014c <_exit>:
 14c:	f8 94       	cli

0000014e <__stop_program>:
 14e:	ff cf       	rjmp	.-2      	; 0x14e <__stop_program>
