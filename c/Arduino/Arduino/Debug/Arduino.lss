
Arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000120  00000194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000120  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  0000019c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000090  00000000  00000000  00000868  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  000008f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000027  00000000  00000000  00000918  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001e7  00000000  00000000  0000093f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000161  00000000  00000000  00000b26  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001f3  00000000  00000000  00000c87  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000030  00000000  00000000  00000e7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000f7  00000000  00000000  00000eac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  00000fa3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000038  00000000  00000000  00000fdf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e2       	ldi	r30, 0x20	; 32
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 6f 00 	call	0xde	; 0xde <main>
  8e:	0c 94 8e 00 	jmp	0x11c	; 0x11c <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <txWrite>:
		
		_delay_ms(10000);
    }	
}

void txWrite(uint8_t letters[]){	
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
    int i, cnt = strlen(letters);
  9a:	e8 2f       	mov	r30, r24
  9c:	f9 2f       	mov	r31, r25
  9e:	df 01       	movw	r26, r30
  a0:	0d 90       	ld	r0, X+
  a2:	00 20       	and	r0, r0
  a4:	e9 f7       	brne	.-6      	; 0xa0 <txWrite+0xa>
  a6:	9d 01       	movw	r18, r26
  a8:	21 50       	subi	r18, 0x01	; 1
  aa:	30 40       	sbci	r19, 0x00	; 0
  ac:	2e 1b       	sub	r18, r30
  ae:	3f 0b       	sbc	r19, r31
	
    for (i = 0; i < cnt; i++) {
  b0:	12 16       	cp	r1, r18
  b2:	13 06       	cpc	r1, r19
  b4:	8c f4       	brge	.+34     	; 0xd8 <txWrite+0x42>
  b6:	a8 2f       	mov	r26, r24
  b8:	b9 2f       	mov	r27, r25
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	90 e0       	ldi	r25, 0x00	; 0
		while (!(UCSR0A & (1 << UDRE0)));
  be:	e0 ec       	ldi	r30, 0xC0	; 192
  c0:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = letters[i];
  c2:	c6 ec       	ldi	r28, 0xC6	; 198
  c4:	d0 e0       	ldi	r29, 0x00	; 0

void txWrite(uint8_t letters[]){	
    int i, cnt = strlen(letters);
	
    for (i = 0; i < cnt; i++) {
		while (!(UCSR0A & (1 << UDRE0)));
  c6:	40 81       	ld	r20, Z
  c8:	45 ff       	sbrs	r20, 5
  ca:	fd cf       	rjmp	.-6      	; 0xc6 <txWrite+0x30>
		UDR0 = letters[i];
  cc:	4d 91       	ld	r20, X+
  ce:	48 83       	st	Y, r20
}

void txWrite(uint8_t letters[]){	
    int i, cnt = strlen(letters);
	
    for (i = 0; i < cnt; i++) {
  d0:	01 96       	adiw	r24, 0x01	; 1
  d2:	28 17       	cp	r18, r24
  d4:	39 07       	cpc	r19, r25
  d6:	b9 f7       	brne	.-18     	; 0xc6 <txWrite+0x30>
		while (!(UCSR0A & (1 << UDRE0)));
		UDR0 = letters[i];
    }	
  d8:	df 91       	pop	r29
  da:	cf 91       	pop	r28
  dc:	08 95       	ret

000000de <main>:
#define BRC    ((F_CPU / 16 / BAUD) - 1)

uint8_t* rxRead();

int main(void)
{
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
    sei();
  e2:	78 94       	sei
	
    UBRR0H = (BRC >> 8);
  e4:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = BRC;
  e8:	87 e6       	ldi	r24, 0x67	; 103
  ea:	80 93 c4 00 	sts	0x00C4, r24
	
    UCSR0B = (1 << TXEN0);	
  ee:	88 e0       	ldi	r24, 0x08	; 8
  f0:	80 93 c1 00 	sts	0x00C1, r24
    UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
  f4:	86 e0       	ldi	r24, 0x06	; 6
  f6:	80 93 c2 00 	sts	0x00C2, r24
	
	DDRB = (1 << PORTB2);
  fa:	84 e0       	ldi	r24, 0x04	; 4
  fc:	84 b9       	out	0x04, r24	; 4

	while(1) {		
		txWrite("Say\n");	
  fe:	c0 e0       	ldi	r28, 0x00	; 0
 100:	d1 e0       	ldi	r29, 0x01	; 1
 102:	ce 01       	movw	r24, r28
 104:	0e 94 4b 00 	call	0x96	; 0x96 <txWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 108:	8f e7       	ldi	r24, 0x7F	; 127
 10a:	94 e8       	ldi	r25, 0x84	; 132
 10c:	ae e1       	ldi	r26, 0x1E	; 30
 10e:	81 50       	subi	r24, 0x01	; 1
 110:	90 40       	sbci	r25, 0x00	; 0
 112:	a0 40       	sbci	r26, 0x00	; 0
 114:	e1 f7       	brne	.-8      	; 0x10e <main+0x30>
 116:	00 c0       	rjmp	.+0      	; 0x118 <main+0x3a>
 118:	00 00       	nop
 11a:	f3 cf       	rjmp	.-26     	; 0x102 <main+0x24>

0000011c <_exit>:
 11c:	f8 94       	cli

0000011e <__stop_program>:
 11e:	ff cf       	rjmp	.-2      	; 0x11e <__stop_program>
