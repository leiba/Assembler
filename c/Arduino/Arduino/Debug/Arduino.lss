
Arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000118  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000097  00000000  00000000  00000838  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  000008cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000003b  00000000  00000000  000008ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001c5  00000000  00000000  0000092a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000010c  00000000  00000000  00000aef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001e7  00000000  00000000  00000bfb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000040  00000000  00000000  00000de4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000f8  00000000  00000000  00000e24  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 00000038  00000000  00000000  00000f1c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 40 00 	jmp	0x80	; 0x80 <__vector_14>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__vector_15>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 7c 00 	call	0xf8	; 0xf8 <main>
  78:	0c 94 8a 00 	jmp	0x114	; 0x114 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <__vector_14>:
#include <avr/interrupt.h>
#include <util/delay.h>

#define F_CPU 16E6

ISR (TIMER0_COMPA_vect) {
  80:	1f 92       	push	r1
  82:	0f 92       	push	r0
  84:	0f b6       	in	r0, 0x3f	; 63
  86:	0f 92       	push	r0
  88:	11 24       	eor	r1, r1
  8a:	8f 93       	push	r24
  8c:	9f 93       	push	r25
  8e:	af 93       	push	r26
  90:	bf 93       	push	r27
	PORTB ^= PORTB0;
  92:	85 b1       	in	r24, 0x05	; 5
  94:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	8f e3       	ldi	r24, 0x3F	; 63
  98:	9d e0       	ldi	r25, 0x0D	; 13
  9a:	a3 e0       	ldi	r26, 0x03	; 3
  9c:	81 50       	subi	r24, 0x01	; 1
  9e:	90 40       	sbci	r25, 0x00	; 0
  a0:	a0 40       	sbci	r26, 0x00	; 0
  a2:	e1 f7       	brne	.-8      	; 0x9c <__vector_14+0x1c>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <__vector_14+0x26>
  a6:	00 00       	nop
	_delay_ms(1000);
}
  a8:	bf 91       	pop	r27
  aa:	af 91       	pop	r26
  ac:	9f 91       	pop	r25
  ae:	8f 91       	pop	r24
  b0:	0f 90       	pop	r0
  b2:	0f be       	out	0x3f, r0	; 63
  b4:	0f 90       	pop	r0
  b6:	1f 90       	pop	r1
  b8:	18 95       	reti

000000ba <__vector_15>:
	
ISR (TIMER0_COMPB_vect) {
  ba:	1f 92       	push	r1
  bc:	0f 92       	push	r0
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
  c4:	8f 93       	push	r24
  c6:	9f 93       	push	r25
  c8:	af 93       	push	r26
  ca:	bf 93       	push	r27
	PORTB ^= PORTB1;
  cc:	95 b1       	in	r25, 0x05	; 5
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	89 27       	eor	r24, r25
  d2:	85 b9       	out	0x05, r24	; 5
  d4:	8f e3       	ldi	r24, 0x3F	; 63
  d6:	9d e0       	ldi	r25, 0x0D	; 13
  d8:	a3 e0       	ldi	r26, 0x03	; 3
  da:	81 50       	subi	r24, 0x01	; 1
  dc:	90 40       	sbci	r25, 0x00	; 0
  de:	a0 40       	sbci	r26, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <__vector_15+0x20>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <__vector_15+0x2a>
  e4:	00 00       	nop
	_delay_ms(1000);
}
  e6:	bf 91       	pop	r27
  e8:	af 91       	pop	r26
  ea:	9f 91       	pop	r25
  ec:	8f 91       	pop	r24
  ee:	0f 90       	pop	r0
  f0:	0f be       	out	0x3f, r0	; 63
  f2:	0f 90       	pop	r0
  f4:	1f 90       	pop	r1
  f6:	18 95       	reti

000000f8 <main>:

int main(void)
{
	DDRB = 0xFF;
  f8:	8f ef       	ldi	r24, 0xFF	; 255
  fa:	84 b9       	out	0x04, r24	; 4
	
	sei();
  fc:	78 94       	sei
	TCCR0A = (1 << WGM01);
  fe:	82 e0       	ldi	r24, 0x02	; 2
 100:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1 << CS02) | (1 << CS00);
 102:	85 e0       	ldi	r24, 0x05	; 5
 104:	85 bd       	out	0x25, r24	; 37
	
	OCR0A  = 200;
 106:	88 ec       	ldi	r24, 0xC8	; 200
 108:	87 bd       	out	0x27, r24	; 39
	OCR0B  = 200; 
 10a:	88 bd       	out	0x28, r24	; 40
	
	TIMSK0 = (1 << OCIE0A) | (1 << OCIE0B);
 10c:	86 e0       	ldi	r24, 0x06	; 6
 10e:	80 93 6e 00 	sts	0x006E, r24
 112:	ff cf       	rjmp	.-2      	; 0x112 <main+0x1a>

00000114 <_exit>:
 114:	f8 94       	cli

00000116 <__stop_program>:
 116:	ff cf       	rjmp	.-2      	; 0x116 <__stop_program>
