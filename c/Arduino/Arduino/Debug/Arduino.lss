
Arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000258  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800100  00800100  000002cc  2**0
                  ALLOC
  2 .stab         00000b70  00000000  00000000  000002cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000001f8  00000000  00000000  00000e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00001034  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000052  00000000  00000000  00001054  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000000fa  00000000  00000000  000010a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000b0  00000000  00000000  000011a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000019b  00000000  00000000  00001250  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000050  00000000  00000000  000013ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000a4  00000000  00000000  0000143c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 0000001e  00000000  00000000  000014e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 76 00 	jmp	0xec	; 0xec <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 4e 00 	call	0x9c	; 0x9c <main>
  88:	0c 94 2a 01 	jmp	0x254	; 0x254 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <adcConvert>:
}

void adcConvert()
{
	// Запускаем единичную конвертацию входящего напряжения в цифру
	ADCSRA |= (1 << ADSC);
  90:	ea e7       	ldi	r30, 0x7A	; 122
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	80 64       	ori	r24, 0x40	; 64
  98:	80 83       	st	Z, r24
}
  9a:	08 95       	ret

0000009c <main>:

double pwm = 0;

int main(void)
{
	sei();
  9c:	78 94       	sei
	//PORTC0
	
	DDRD = (1 << PORTD6) | (1 << PORTD5);
  9e:	80 e6       	ldi	r24, 0x60	; 96
  a0:	8a b9       	out	0x0a, r24	; 10
	
	// Compare output mode, Fast PWM mode. Режим работы ШИМ
	// Очистка счетчика, установка уровня в 0 при совпадении
	TCCR0A = (1 << COM0A1); // Clear on compare match, set bottom OCR0A
  a2:	80 e8       	ldi	r24, 0x80	; 128
  a4:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << COM0B1); // Clear on compare match, set bottom OCR0B
  a6:	94 b5       	in	r25, 0x24	; 36
  a8:	90 62       	ori	r25, 0x20	; 32
  aa:	94 bd       	out	0x24, r25	; 36
	
	// Waveform generation mode. Режим работы таймера
	TCCR0A |= (1 << WGM01) | (1 << WGM00); // Fast PWM
  ac:	94 b5       	in	r25, 0x24	; 36
  ae:	93 60       	ori	r25, 0x03	; 3
  b0:	94 bd       	out	0x24, r25	; 36
	
	// Clock select bit. Предделитель
	TCCR0B = (1 << CS00); // Предделитель 1
  b2:	91 e0       	ldi	r25, 0x01	; 1
  b4:	95 bd       	out	0x25, r25	; 37
	
	// Output compare register
	// Регистр сравнения
	OCR0A = OCR0B = 0; // Всегда в 0. ШИМ уровень 5v, заканчивается сразу счета
  b6:	18 bc       	out	0x28, r1	; 40
  b8:	28 b5       	in	r18, 0x28	; 40
  ba:	27 bd       	out	0x27, r18	; 39
	
	// Timer/Counter Interrupt mask register
    // Разрешение прерывания
	TIMSK0 = (1 << TOIE0); // Прерывание по переполнению счетчика
  bc:	90 93 6e 00 	sts	0x006E, r25
	
	// Multiplexer selection register
	ADMUX = (1 << REFS0); // AVcc. Сравнение входящего напряжения с питанием 5v
  c0:	ec e7       	ldi	r30, 0x7C	; 124
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	90 e4       	ldi	r25, 0x40	; 64
  c6:	90 83       	st	Z, r25
	
	// Input channel selection. Выбор аналогового входа
	ADMUX |= (1 << MUX0); // Порт ADC1 (PC1)
  c8:	90 81       	ld	r25, Z
  ca:	91 60       	ori	r25, 0x01	; 1
  cc:	90 83       	st	Z, r25
	
	// Adc control. Настройка сравнения
	ADCSRA = (1 << ADEN); // ADC Enable. Включение аналогового конвертора
  ce:	ea e7       	ldi	r30, 0x7A	; 122
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 83       	st	Z, r24
	
	// Включение разрешения на прерывания аналогового конвертора
	// Сработает когда сконвертирует входное напряжение в цифру
	ADCSRA |= (1 << ADIE); 
  d4:	80 81       	ld	r24, Z
  d6:	88 60       	ori	r24, 0x08	; 8
  d8:	80 83       	st	Z, r24
	
	ADCSRA |= (1 << ADPS0) | (1 << ADPS1) | (ADPS2); // 128
  da:	80 81       	ld	r24, Z
  dc:	83 60       	ori	r24, 0x03	; 3
  de:	80 83       	st	Z, r24
	
	// Digital input disable 
	// Выключаем работу пина как цифрового, для работы в аналоговом режиме
	DIDR0 = (1 << ADC1D);
  e0:	82 e0       	ldi	r24, 0x02	; 2
  e2:	80 93 7e 00 	sts	0x007E, r24
	
	adcConvert();
  e6:	0e 94 48 00 	call	0x90	; 0x90 <adcConvert>
  ea:	ff cf       	rjmp	.-2      	; 0xea <main+0x4e>

000000ec <__vector_21>:
{
	// Запускаем единичную конвертацию входящего напряжения в цифру
	ADCSRA |= (1 << ADSC);
}

ISR (ADC_vect) {
  ec:	1f 92       	push	r1
  ee:	0f 92       	push	r0
  f0:	0f b6       	in	r0, 0x3f	; 63
  f2:	0f 92       	push	r0
  f4:	11 24       	eor	r1, r1
  f6:	2f 93       	push	r18
  f8:	3f 93       	push	r19
  fa:	4f 93       	push	r20
  fc:	5f 93       	push	r21
  fe:	6f 93       	push	r22
 100:	7f 93       	push	r23
 102:	8f 93       	push	r24
 104:	9f 93       	push	r25
 106:	af 93       	push	r26
 108:	bf 93       	push	r27
 10a:	ef 93       	push	r30
 10c:	ff 93       	push	r31
	pwm = ADCH1 / 4.0;
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	a0 e8       	ldi	r26, 0x80	; 128
 114:	be e3       	ldi	r27, 0x3E	; 62
 116:	80 93 00 01 	sts	0x0100, r24
 11a:	90 93 01 01 	sts	0x0101, r25
 11e:	a0 93 02 01 	sts	0x0102, r26
 122:	b0 93 03 01 	sts	0x0103, r27
	adcConvert();
 126:	0e 94 48 00 	call	0x90	; 0x90 <adcConvert>
}
 12a:	ff 91       	pop	r31
 12c:	ef 91       	pop	r30
 12e:	bf 91       	pop	r27
 130:	af 91       	pop	r26
 132:	9f 91       	pop	r25
 134:	8f 91       	pop	r24
 136:	7f 91       	pop	r23
 138:	6f 91       	pop	r22
 13a:	5f 91       	pop	r21
 13c:	4f 91       	pop	r20
 13e:	3f 91       	pop	r19
 140:	2f 91       	pop	r18
 142:	0f 90       	pop	r0
 144:	0f be       	out	0x3f, r0	; 63
 146:	0f 90       	pop	r0
 148:	1f 90       	pop	r1
 14a:	18 95       	reti

0000014c <__vector_16>:

ISR(TIMER0_OVF_vect) {
 14c:	1f 92       	push	r1
 14e:	0f 92       	push	r0
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	0f 92       	push	r0
 154:	11 24       	eor	r1, r1
 156:	2f 93       	push	r18
 158:	3f 93       	push	r19
 15a:	4f 93       	push	r20
 15c:	5f 93       	push	r21
 15e:	6f 93       	push	r22
 160:	7f 93       	push	r23
 162:	8f 93       	push	r24
 164:	9f 93       	push	r25
 166:	af 93       	push	r26
 168:	bf 93       	push	r27
 16a:	ef 93       	push	r30
 16c:	ff 93       	push	r31
	OCR0A = OCR0B = pwm;	
 16e:	60 91 00 01 	lds	r22, 0x0100
 172:	70 91 01 01 	lds	r23, 0x0101
 176:	80 91 02 01 	lds	r24, 0x0102
 17a:	90 91 03 01 	lds	r25, 0x0103
 17e:	0e 94 d5 00 	call	0x1aa	; 0x1aa <__fixunssfsi>
 182:	68 bd       	out	0x28, r22	; 40
 184:	88 b5       	in	r24, 0x28	; 40
 186:	87 bd       	out	0x27, r24	; 39
}
 188:	ff 91       	pop	r31
 18a:	ef 91       	pop	r30
 18c:	bf 91       	pop	r27
 18e:	af 91       	pop	r26
 190:	9f 91       	pop	r25
 192:	8f 91       	pop	r24
 194:	7f 91       	pop	r23
 196:	6f 91       	pop	r22
 198:	5f 91       	pop	r21
 19a:	4f 91       	pop	r20
 19c:	3f 91       	pop	r19
 19e:	2f 91       	pop	r18
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <__fixunssfsi>:
 1aa:	33 d0       	rcall	.+102    	; 0x212 <__fp_splitA>
 1ac:	88 f0       	brcs	.+34     	; 0x1d0 <__fixunssfsi+0x26>
 1ae:	9f 57       	subi	r25, 0x7F	; 127
 1b0:	90 f0       	brcs	.+36     	; 0x1d6 <__fixunssfsi+0x2c>
 1b2:	b9 2f       	mov	r27, r25
 1b4:	99 27       	eor	r25, r25
 1b6:	b7 51       	subi	r27, 0x17	; 23
 1b8:	a0 f0       	brcs	.+40     	; 0x1e2 <__fixunssfsi+0x38>
 1ba:	d1 f0       	breq	.+52     	; 0x1f0 <__fixunssfsi+0x46>
 1bc:	66 0f       	add	r22, r22
 1be:	77 1f       	adc	r23, r23
 1c0:	88 1f       	adc	r24, r24
 1c2:	99 1f       	adc	r25, r25
 1c4:	1a f0       	brmi	.+6      	; 0x1cc <__fixunssfsi+0x22>
 1c6:	ba 95       	dec	r27
 1c8:	c9 f7       	brne	.-14     	; 0x1bc <__fixunssfsi+0x12>
 1ca:	12 c0       	rjmp	.+36     	; 0x1f0 <__fixunssfsi+0x46>
 1cc:	b1 30       	cpi	r27, 0x01	; 1
 1ce:	81 f0       	breq	.+32     	; 0x1f0 <__fixunssfsi+0x46>
 1d0:	3a d0       	rcall	.+116    	; 0x246 <__fp_zero>
 1d2:	b1 e0       	ldi	r27, 0x01	; 1
 1d4:	08 95       	ret
 1d6:	37 c0       	rjmp	.+110    	; 0x246 <__fp_zero>
 1d8:	67 2f       	mov	r22, r23
 1da:	78 2f       	mov	r23, r24
 1dc:	88 27       	eor	r24, r24
 1de:	b8 5f       	subi	r27, 0xF8	; 248
 1e0:	39 f0       	breq	.+14     	; 0x1f0 <__fixunssfsi+0x46>
 1e2:	b9 3f       	cpi	r27, 0xF9	; 249
 1e4:	cc f3       	brlt	.-14     	; 0x1d8 <__fixunssfsi+0x2e>
 1e6:	86 95       	lsr	r24
 1e8:	77 95       	ror	r23
 1ea:	67 95       	ror	r22
 1ec:	b3 95       	inc	r27
 1ee:	d9 f7       	brne	.-10     	; 0x1e6 <__fixunssfsi+0x3c>
 1f0:	3e f4       	brtc	.+14     	; 0x200 <__fixunssfsi+0x56>
 1f2:	90 95       	com	r25
 1f4:	80 95       	com	r24
 1f6:	70 95       	com	r23
 1f8:	61 95       	neg	r22
 1fa:	7f 4f       	sbci	r23, 0xFF	; 255
 1fc:	8f 4f       	sbci	r24, 0xFF	; 255
 1fe:	9f 4f       	sbci	r25, 0xFF	; 255
 200:	08 95       	ret

00000202 <__fp_split3>:
 202:	57 fd       	sbrc	r21, 7
 204:	90 58       	subi	r25, 0x80	; 128
 206:	44 0f       	add	r20, r20
 208:	55 1f       	adc	r21, r21
 20a:	59 f0       	breq	.+22     	; 0x222 <__fp_splitA+0x10>
 20c:	5f 3f       	cpi	r21, 0xFF	; 255
 20e:	71 f0       	breq	.+28     	; 0x22c <__fp_splitA+0x1a>
 210:	47 95       	ror	r20

00000212 <__fp_splitA>:
 212:	88 0f       	add	r24, r24
 214:	97 fb       	bst	r25, 7
 216:	99 1f       	adc	r25, r25
 218:	61 f0       	breq	.+24     	; 0x232 <__fp_splitA+0x20>
 21a:	9f 3f       	cpi	r25, 0xFF	; 255
 21c:	79 f0       	breq	.+30     	; 0x23c <__fp_splitA+0x2a>
 21e:	87 95       	ror	r24
 220:	08 95       	ret
 222:	12 16       	cp	r1, r18
 224:	13 06       	cpc	r1, r19
 226:	14 06       	cpc	r1, r20
 228:	55 1f       	adc	r21, r21
 22a:	f2 cf       	rjmp	.-28     	; 0x210 <__fp_split3+0xe>
 22c:	46 95       	lsr	r20
 22e:	f1 df       	rcall	.-30     	; 0x212 <__fp_splitA>
 230:	08 c0       	rjmp	.+16     	; 0x242 <__fp_splitA+0x30>
 232:	16 16       	cp	r1, r22
 234:	17 06       	cpc	r1, r23
 236:	18 06       	cpc	r1, r24
 238:	99 1f       	adc	r25, r25
 23a:	f1 cf       	rjmp	.-30     	; 0x21e <__fp_splitA+0xc>
 23c:	86 95       	lsr	r24
 23e:	71 05       	cpc	r23, r1
 240:	61 05       	cpc	r22, r1
 242:	08 94       	sec
 244:	08 95       	ret

00000246 <__fp_zero>:
 246:	e8 94       	clt

00000248 <__fp_szero>:
 248:	bb 27       	eor	r27, r27
 24a:	66 27       	eor	r22, r22
 24c:	77 27       	eor	r23, r23
 24e:	cb 01       	movw	r24, r22
 250:	97 f9       	bld	r25, 7
 252:	08 95       	ret

00000254 <_exit>:
 254:	f8 94       	cli

00000256 <__stop_program>:
 256:	ff cf       	rjmp	.-2      	; 0x256 <__stop_program>
