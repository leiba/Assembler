
Arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000001c4  00000258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000404  0080010a  0080010a  00000262  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000264  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000930  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  000009c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000071  00000000  00000000  000009e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000288  00000000  00000000  00000a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000001ac  00000000  00000000  00000ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000232  00000000  00000000  00000e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000040  00000000  00000000  000010c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000013b  00000000  00000000  00001100  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000004f  00000000  00000000  0000123b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000043  00000000  00000000  0000128a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 ac 00 	jmp	0x158	; 0x158 <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ec       	ldi	r30, 0xC4	; 196
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	15 e0       	ldi	r17, 0x05	; 5
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 30       	cpi	r26, 0x0E	; 14
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 89 00 	call	0x112	; 0x112 <main>
  9e:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <serialWrite>:
		serialWrite("Message\n", 1);
		_delay_ms(1000);
	}	
}

void serialWrite(int8_t letters[], int8_t isNewLine){	
  a6:	1f 93       	push	r17
	int i, cnt = strlen(letters);
  a8:	e8 2f       	mov	r30, r24
  aa:	f9 2f       	mov	r31, r25
  ac:	df 01       	movw	r26, r30
  ae:	0d 90       	ld	r0, X+
  b0:	00 20       	and	r0, r0
  b2:	e9 f7       	brne	.-6      	; 0xae <serialWrite+0x8>
  b4:	ad 01       	movw	r20, r26
  b6:	41 50       	subi	r20, 0x01	; 1
  b8:	50 40       	sbci	r21, 0x00	; 0
  ba:	4e 1b       	sub	r20, r30
  bc:	5f 0b       	sbc	r21, r31
	
	for (i = 0; i < cnt; i++) {
  be:	14 16       	cp	r1, r20
  c0:	15 06       	cpc	r1, r21
  c2:	fc f4       	brge	.+62     	; 0x102 <serialWrite+0x5c>
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	90 e0       	ldi	r25, 0x00	; 0
		serialBuffer[serialPosWrite++] = letters[i];
  c8:	6e e0       	ldi	r22, 0x0E	; 14
  ca:	71 e0       	ldi	r23, 0x01	; 1
  cc:	20 91 0a 01 	lds	r18, 0x010A
  d0:	30 91 0b 01 	lds	r19, 0x010B
  d4:	11 91       	ld	r17, Z+
  d6:	db 01       	movw	r26, r22
  d8:	a2 0f       	add	r26, r18
  da:	b3 1f       	adc	r27, r19
  dc:	1c 93       	st	X, r17
  de:	2f 5f       	subi	r18, 0xFF	; 255
  e0:	3f 4f       	sbci	r19, 0xFF	; 255
  e2:	30 93 0b 01 	sts	0x010B, r19
  e6:	20 93 0a 01 	sts	0x010A, r18
		
		if (serialPosWrite >= SERIAL) {
  ea:	b4 e0       	ldi	r27, 0x04	; 4
  ec:	20 30       	cpi	r18, 0x00	; 0
  ee:	3b 07       	cpc	r19, r27
  f0:	24 f0       	brlt	.+8      	; 0xfa <serialWrite+0x54>
			serialPosWrite = 0;
  f2:	10 92 0b 01 	sts	0x010B, r1
  f6:	10 92 0a 01 	sts	0x010A, r1
}

void serialWrite(int8_t letters[], int8_t isNewLine){	
	int i, cnt = strlen(letters);
	
	for (i = 0; i < cnt; i++) {
  fa:	01 96       	adiw	r24, 0x01	; 1
  fc:	48 17       	cp	r20, r24
  fe:	59 07       	cpc	r21, r25
 100:	29 f7       	brne	.-54     	; 0xcc <serialWrite+0x26>
		}
	}
	
	// UCSR0A. Регистр состояния передачи
	// UDRE0. Флаг в UCSR0A говорящий о том что буффер готов к принятию новых данных
	if (UCSR0A & (1 << UDRE0)) {
 102:	80 91 c0 00 	lds	r24, 0x00C0
 106:	85 ff       	sbrs	r24, 5
 108:	02 c0       	rjmp	.+4      	; 0x10e <serialWrite+0x68>
		UDR0 = 0;
 10a:	10 92 c6 00 	sts	0x00C6, r1
	}	
}
 10e:	1f 91       	pop	r17
 110:	08 95       	ret

00000112 <main>:
int8_t serialBuffer[SERIAL];
int serialPosWrite = 0;
int serialPosRead = 0;

int main(void)
{
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
	sei();
 116:	78 94       	sei
	
	// Usart Baud Rate register. Регистры настройки бод\сек
	UBRR0H = (BRC >> 8); // Записываем 8 старших бит
 118:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = BRC; // Записываем 8 младших бит
 11c:	87 e6       	ldi	r24, 0x67	; 103
 11e:	80 93 c4 00 	sts	0x00C4, r24
	
	// Разрешаем прерывания USART
	UCSR0B = (1 << TXEN0); // Включаем передачу через USART, отключая работу порта в обычном режиме
 122:	e1 ec       	ldi	r30, 0xC1	; 193
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	88 e0       	ldi	r24, 0x08	; 8
 128:	80 83       	st	Z, r24
	UCSR0B |= (1 << TXCIE0); // Разрешаем прерывание по завершение передачи байта
 12a:	80 81       	ld	r24, Z
 12c:	80 64       	ori	r24, 0x40	; 64
 12e:	80 83       	st	Z, r24
	// Parity. Контрольный бит проверки четности двоичного числа
	// UCSR0C = (1 << UPM01); // Enable even parity
	
	// Control and status regiter n C.
	// Настройки данных 
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); // Character size. Размер пакета. 8 бит
 130:	86 e0       	ldi	r24, 0x06	; 6
 132:	80 93 c2 00 	sts	0x00C2, r24
	
	while(1) {
		serialWrite("Message\n", 1);
 136:	c0 e0       	ldi	r28, 0x00	; 0
 138:	d1 e0       	ldi	r29, 0x01	; 1
 13a:	ce 01       	movw	r24, r28
 13c:	61 e0       	ldi	r22, 0x01	; 1
 13e:	70 e0       	ldi	r23, 0x00	; 0
 140:	0e 94 53 00 	call	0xa6	; 0xa6 <serialWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 144:	8f e3       	ldi	r24, 0x3F	; 63
 146:	9d e0       	ldi	r25, 0x0D	; 13
 148:	a3 e0       	ldi	r26, 0x03	; 3
 14a:	81 50       	subi	r24, 0x01	; 1
 14c:	90 40       	sbci	r25, 0x00	; 0
 14e:	a0 40       	sbci	r26, 0x00	; 0
 150:	e1 f7       	brne	.-8      	; 0x14a <main+0x38>
 152:	00 c0       	rjmp	.+0      	; 0x154 <main+0x42>
 154:	00 00       	nop
 156:	f1 cf       	rjmp	.-30     	; 0x13a <main+0x28>

00000158 <__vector_20>:
		UDR0 = 0;
	}	
}

// Прерывания завершения передачи байта
ISR(USART_TX_vect) {
 158:	1f 92       	push	r1
 15a:	0f 92       	push	r0
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	0f 92       	push	r0
 160:	11 24       	eor	r1, r1
 162:	2f 93       	push	r18
 164:	3f 93       	push	r19
 166:	8f 93       	push	r24
 168:	9f 93       	push	r25
 16a:	ef 93       	push	r30
 16c:	ff 93       	push	r31
	// Если есть что передавать
	if (serialPosRead != serialPosWrite) {
 16e:	80 91 0c 01 	lds	r24, 0x010C
 172:	90 91 0d 01 	lds	r25, 0x010D
 176:	20 91 0a 01 	lds	r18, 0x010A
 17a:	30 91 0b 01 	lds	r19, 0x010B
 17e:	82 17       	cp	r24, r18
 180:	93 07       	cpc	r25, r19
 182:	99 f0       	breq	.+38     	; 0x1aa <__vector_20+0x52>
		// Установка байта в UDR0 автоматически передает его через USART
		UDR0 = serialBuffer[serialPosRead++];
 184:	fc 01       	movw	r30, r24
 186:	e2 5f       	subi	r30, 0xF2	; 242
 188:	fe 4f       	sbci	r31, 0xFE	; 254
 18a:	20 81       	ld	r18, Z
 18c:	20 93 c6 00 	sts	0x00C6, r18
 190:	01 96       	adiw	r24, 0x01	; 1
 192:	90 93 0d 01 	sts	0x010D, r25
 196:	80 93 0c 01 	sts	0x010C, r24
		
		if (serialPosRead > SERIAL) {
 19a:	24 e0       	ldi	r18, 0x04	; 4
 19c:	81 30       	cpi	r24, 0x01	; 1
 19e:	92 07       	cpc	r25, r18
 1a0:	24 f0       	brlt	.+8      	; 0x1aa <__vector_20+0x52>
			serialPosRead = 0;
 1a2:	10 92 0d 01 	sts	0x010D, r1
 1a6:	10 92 0c 01 	sts	0x010C, r1
		}
	}	
}
 1aa:	ff 91       	pop	r31
 1ac:	ef 91       	pop	r30
 1ae:	9f 91       	pop	r25
 1b0:	8f 91       	pop	r24
 1b2:	3f 91       	pop	r19
 1b4:	2f 91       	pop	r18
 1b6:	0f 90       	pop	r0
 1b8:	0f be       	out	0x3f, r0	; 63
 1ba:	0f 90       	pop	r0
 1bc:	1f 90       	pop	r1
 1be:	18 95       	reti

000001c0 <_exit>:
 1c0:	f8 94       	cli

000001c2 <__stop_program>:
 1c2:	ff cf       	rjmp	.-2      	; 0x1c2 <__stop_program>
