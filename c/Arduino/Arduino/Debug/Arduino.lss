
Arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002da  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800100  00800100  0000034e  2**0
                  ALLOC
  2 .stab         00000e88  00000000  00000000  00000350  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000026e  00000000  00000000  000011d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00001446  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000052  00000000  00000000  00001466  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000105  00000000  00000000  000014b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000b0  00000000  00000000  000015bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000019b  00000000  00000000  0000166d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000050  00000000  00000000  00001808  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000ad  00000000  00000000  00001858  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 0000002b  00000000  00000000  00001905  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 aa 00 	jmp	0x154	; 0x154 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 76 00 	jmp	0xec	; 0xec <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 4e 00 	call	0x9c	; 0x9c <main>
  88:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <adcConvert>:
}

void adcConvert()
{
	// Запускаем единичную конвертацию входящего напряжения в цифру
	ADCSRA |= (1 << ADSC);
  90:	ea e7       	ldi	r30, 0x7A	; 122
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	80 64       	ori	r24, 0x40	; 64
  98:	80 83       	st	Z, r24
}
  9a:	08 95       	ret

0000009c <main>:

double pwm = 0;

int main(void)
{
	sei();
  9c:	78 94       	sei
	//PORTC0
	
	DDRD = (1 << PORTD6) | (1 << PORTD5);
  9e:	80 e6       	ldi	r24, 0x60	; 96
  a0:	8a b9       	out	0x0a, r24	; 10
	
	// Compare output mode, Fast PWM mode. Режим работы ШИМ
	// Очистка счетчика, установка уровня в 0 при совпадении
	TCCR0A = (1 << COM0A1); // Clear on compare match, set bottom OCR0A
  a2:	80 e8       	ldi	r24, 0x80	; 128
  a4:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << COM0B1); // Clear on compare match, set bottom OCR0B
  a6:	94 b5       	in	r25, 0x24	; 36
  a8:	90 62       	ori	r25, 0x20	; 32
  aa:	94 bd       	out	0x24, r25	; 36
	
	// Waveform generation mode. Режим работы таймера
	TCCR0A |= (1 << WGM01) | (1 << WGM00); // Fast PWM
  ac:	94 b5       	in	r25, 0x24	; 36
  ae:	93 60       	ori	r25, 0x03	; 3
  b0:	94 bd       	out	0x24, r25	; 36
	
	// Clock select bit. Предделитель
	TCCR0B = (1 << CS00); // Предделитель 1
  b2:	91 e0       	ldi	r25, 0x01	; 1
  b4:	95 bd       	out	0x25, r25	; 37
	
	// Output compare register
	// Регистр сравнения
	OCR0A = OCR0B = 0; // Всегда в 0. ШИМ уровень 5v, заканчивается сразу счета
  b6:	18 bc       	out	0x28, r1	; 40
  b8:	28 b5       	in	r18, 0x28	; 40
  ba:	27 bd       	out	0x27, r18	; 39
	
	// Timer/Counter Interrupt mask register
    // Разрешение прерывания
	TIMSK0 = (1 << TOIE0); // Прерывание по переполнению счетчика
  bc:	90 93 6e 00 	sts	0x006E, r25
	
	// Multiplexer selection register
	ADMUX = (1 << REFS0); // AVcc. Сравнение входящего напряжения с питанием 5v
  c0:	ec e7       	ldi	r30, 0x7C	; 124
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	90 e4       	ldi	r25, 0x40	; 64
  c6:	90 83       	st	Z, r25
	
	// Input channel selection. Выбор аналогового входа
	ADMUX |= (1 << MUX0); // Порт ADC1 (PC1)
  c8:	90 81       	ld	r25, Z
  ca:	91 60       	ori	r25, 0x01	; 1
  cc:	90 83       	st	Z, r25
	
	// Adc control. Настройка сравнения
	ADCSRA = (1 << ADEN); // ADC Enable. Включение аналогового конвертора
  ce:	ea e7       	ldi	r30, 0x7A	; 122
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 83       	st	Z, r24
	
	// Включение разрешения на прерывания аналогового конвертора
	// Сработает когда сконвертирует входное напряжение в цифру
	ADCSRA |= (1 << ADIE); 
  d4:	80 81       	ld	r24, Z
  d6:	88 60       	ori	r24, 0x08	; 8
  d8:	80 83       	st	Z, r24
	
	ADCSRA |= (1 << ADPS0) | (1 << ADPS1) | (ADPS2); // 128
  da:	80 81       	ld	r24, Z
  dc:	83 60       	ori	r24, 0x03	; 3
  de:	80 83       	st	Z, r24
	
	// Digital input disable 
	// Выключаем работу пина как цифрового, для работы в аналоговом режиме
	DIDR0 = (1 << ADC1D);
  e0:	82 e0       	ldi	r24, 0x02	; 2
  e2:	80 93 7e 00 	sts	0x007E, r24
	
	adcConvert();
  e6:	0e 94 48 00 	call	0x90	; 0x90 <adcConvert>
  ea:	ff cf       	rjmp	.-2      	; 0xea <main+0x4e>

000000ec <__vector_21>:
{
	// Запускаем единичную конвертацию входящего напряжения в цифру
	ADCSRA |= (1 << ADSC);
}

ISR (ADC_vect) {
  ec:	1f 92       	push	r1
  ee:	0f 92       	push	r0
  f0:	0f b6       	in	r0, 0x3f	; 63
  f2:	0f 92       	push	r0
  f4:	11 24       	eor	r1, r1
  f6:	2f 93       	push	r18
  f8:	3f 93       	push	r19
  fa:	4f 93       	push	r20
  fc:	5f 93       	push	r21
  fe:	6f 93       	push	r22
 100:	7f 93       	push	r23
 102:	8f 93       	push	r24
 104:	9f 93       	push	r25
 106:	af 93       	push	r26
 108:	bf 93       	push	r27
 10a:	ef 93       	push	r30
 10c:	ff 93       	push	r31
	pwm = ADC;
 10e:	60 91 78 00 	lds	r22, 0x0078
 112:	70 91 79 00 	lds	r23, 0x0079
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 05 01 	call	0x20a	; 0x20a <__floatunsisf>
 11e:	60 93 00 01 	sts	0x0100, r22
 122:	70 93 01 01 	sts	0x0101, r23
 126:	80 93 02 01 	sts	0x0102, r24
 12a:	90 93 03 01 	sts	0x0103, r25
	adcConvert();
 12e:	0e 94 48 00 	call	0x90	; 0x90 <adcConvert>
}
 132:	ff 91       	pop	r31
 134:	ef 91       	pop	r30
 136:	bf 91       	pop	r27
 138:	af 91       	pop	r26
 13a:	9f 91       	pop	r25
 13c:	8f 91       	pop	r24
 13e:	7f 91       	pop	r23
 140:	6f 91       	pop	r22
 142:	5f 91       	pop	r21
 144:	4f 91       	pop	r20
 146:	3f 91       	pop	r19
 148:	2f 91       	pop	r18
 14a:	0f 90       	pop	r0
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	0f 90       	pop	r0
 150:	1f 90       	pop	r1
 152:	18 95       	reti

00000154 <__vector_16>:

ISR(TIMER0_OVF_vect) {
 154:	1f 92       	push	r1
 156:	0f 92       	push	r0
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	0f 92       	push	r0
 15c:	11 24       	eor	r1, r1
 15e:	2f 93       	push	r18
 160:	3f 93       	push	r19
 162:	4f 93       	push	r20
 164:	5f 93       	push	r21
 166:	6f 93       	push	r22
 168:	7f 93       	push	r23
 16a:	8f 93       	push	r24
 16c:	9f 93       	push	r25
 16e:	af 93       	push	r26
 170:	bf 93       	push	r27
 172:	ef 93       	push	r30
 174:	ff 93       	push	r31
	OCR0A = OCR0B = pwm;	
 176:	60 91 00 01 	lds	r22, 0x0100
 17a:	70 91 01 01 	lds	r23, 0x0101
 17e:	80 91 02 01 	lds	r24, 0x0102
 182:	90 91 03 01 	lds	r25, 0x0103
 186:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <__fixunssfsi>
 18a:	68 bd       	out	0x28, r22	; 40
 18c:	88 b5       	in	r24, 0x28	; 40
 18e:	87 bd       	out	0x27, r24	; 39
}
 190:	ff 91       	pop	r31
 192:	ef 91       	pop	r30
 194:	bf 91       	pop	r27
 196:	af 91       	pop	r26
 198:	9f 91       	pop	r25
 19a:	8f 91       	pop	r24
 19c:	7f 91       	pop	r23
 19e:	6f 91       	pop	r22
 1a0:	5f 91       	pop	r21
 1a2:	4f 91       	pop	r20
 1a4:	3f 91       	pop	r19
 1a6:	2f 91       	pop	r18
 1a8:	0f 90       	pop	r0
 1aa:	0f be       	out	0x3f, r0	; 63
 1ac:	0f 90       	pop	r0
 1ae:	1f 90       	pop	r1
 1b0:	18 95       	reti

000001b2 <__fixunssfsi>:
 1b2:	70 d0       	rcall	.+224    	; 0x294 <__fp_splitA>
 1b4:	88 f0       	brcs	.+34     	; 0x1d8 <__fixunssfsi+0x26>
 1b6:	9f 57       	subi	r25, 0x7F	; 127
 1b8:	90 f0       	brcs	.+36     	; 0x1de <__fixunssfsi+0x2c>
 1ba:	b9 2f       	mov	r27, r25
 1bc:	99 27       	eor	r25, r25
 1be:	b7 51       	subi	r27, 0x17	; 23
 1c0:	a0 f0       	brcs	.+40     	; 0x1ea <__fixunssfsi+0x38>
 1c2:	d1 f0       	breq	.+52     	; 0x1f8 <__fixunssfsi+0x46>
 1c4:	66 0f       	add	r22, r22
 1c6:	77 1f       	adc	r23, r23
 1c8:	88 1f       	adc	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	1a f0       	brmi	.+6      	; 0x1d4 <__fixunssfsi+0x22>
 1ce:	ba 95       	dec	r27
 1d0:	c9 f7       	brne	.-14     	; 0x1c4 <__fixunssfsi+0x12>
 1d2:	12 c0       	rjmp	.+36     	; 0x1f8 <__fixunssfsi+0x46>
 1d4:	b1 30       	cpi	r27, 0x01	; 1
 1d6:	81 f0       	breq	.+32     	; 0x1f8 <__fixunssfsi+0x46>
 1d8:	77 d0       	rcall	.+238    	; 0x2c8 <__fp_zero>
 1da:	b1 e0       	ldi	r27, 0x01	; 1
 1dc:	08 95       	ret
 1de:	74 c0       	rjmp	.+232    	; 0x2c8 <__fp_zero>
 1e0:	67 2f       	mov	r22, r23
 1e2:	78 2f       	mov	r23, r24
 1e4:	88 27       	eor	r24, r24
 1e6:	b8 5f       	subi	r27, 0xF8	; 248
 1e8:	39 f0       	breq	.+14     	; 0x1f8 <__fixunssfsi+0x46>
 1ea:	b9 3f       	cpi	r27, 0xF9	; 249
 1ec:	cc f3       	brlt	.-14     	; 0x1e0 <__fixunssfsi+0x2e>
 1ee:	86 95       	lsr	r24
 1f0:	77 95       	ror	r23
 1f2:	67 95       	ror	r22
 1f4:	b3 95       	inc	r27
 1f6:	d9 f7       	brne	.-10     	; 0x1ee <__fixunssfsi+0x3c>
 1f8:	3e f4       	brtc	.+14     	; 0x208 <__fixunssfsi+0x56>
 1fa:	90 95       	com	r25
 1fc:	80 95       	com	r24
 1fe:	70 95       	com	r23
 200:	61 95       	neg	r22
 202:	7f 4f       	sbci	r23, 0xFF	; 255
 204:	8f 4f       	sbci	r24, 0xFF	; 255
 206:	9f 4f       	sbci	r25, 0xFF	; 255
 208:	08 95       	ret

0000020a <__floatunsisf>:
 20a:	e8 94       	clt
 20c:	09 c0       	rjmp	.+18     	; 0x220 <__floatsisf+0x12>

0000020e <__floatsisf>:
 20e:	97 fb       	bst	r25, 7
 210:	3e f4       	brtc	.+14     	; 0x220 <__floatsisf+0x12>
 212:	90 95       	com	r25
 214:	80 95       	com	r24
 216:	70 95       	com	r23
 218:	61 95       	neg	r22
 21a:	7f 4f       	sbci	r23, 0xFF	; 255
 21c:	8f 4f       	sbci	r24, 0xFF	; 255
 21e:	9f 4f       	sbci	r25, 0xFF	; 255
 220:	99 23       	and	r25, r25
 222:	a9 f0       	breq	.+42     	; 0x24e <__floatsisf+0x40>
 224:	f9 2f       	mov	r31, r25
 226:	96 e9       	ldi	r25, 0x96	; 150
 228:	bb 27       	eor	r27, r27
 22a:	93 95       	inc	r25
 22c:	f6 95       	lsr	r31
 22e:	87 95       	ror	r24
 230:	77 95       	ror	r23
 232:	67 95       	ror	r22
 234:	b7 95       	ror	r27
 236:	f1 11       	cpse	r31, r1
 238:	f8 cf       	rjmp	.-16     	; 0x22a <__floatsisf+0x1c>
 23a:	fa f4       	brpl	.+62     	; 0x27a <__floatsisf+0x6c>
 23c:	bb 0f       	add	r27, r27
 23e:	11 f4       	brne	.+4      	; 0x244 <__floatsisf+0x36>
 240:	60 ff       	sbrs	r22, 0
 242:	1b c0       	rjmp	.+54     	; 0x27a <__floatsisf+0x6c>
 244:	6f 5f       	subi	r22, 0xFF	; 255
 246:	7f 4f       	sbci	r23, 0xFF	; 255
 248:	8f 4f       	sbci	r24, 0xFF	; 255
 24a:	9f 4f       	sbci	r25, 0xFF	; 255
 24c:	16 c0       	rjmp	.+44     	; 0x27a <__floatsisf+0x6c>
 24e:	88 23       	and	r24, r24
 250:	11 f0       	breq	.+4      	; 0x256 <__floatsisf+0x48>
 252:	96 e9       	ldi	r25, 0x96	; 150
 254:	11 c0       	rjmp	.+34     	; 0x278 <__floatsisf+0x6a>
 256:	77 23       	and	r23, r23
 258:	21 f0       	breq	.+8      	; 0x262 <__floatsisf+0x54>
 25a:	9e e8       	ldi	r25, 0x8E	; 142
 25c:	87 2f       	mov	r24, r23
 25e:	76 2f       	mov	r23, r22
 260:	05 c0       	rjmp	.+10     	; 0x26c <__floatsisf+0x5e>
 262:	66 23       	and	r22, r22
 264:	71 f0       	breq	.+28     	; 0x282 <__floatsisf+0x74>
 266:	96 e8       	ldi	r25, 0x86	; 134
 268:	86 2f       	mov	r24, r22
 26a:	70 e0       	ldi	r23, 0x00	; 0
 26c:	60 e0       	ldi	r22, 0x00	; 0
 26e:	2a f0       	brmi	.+10     	; 0x27a <__floatsisf+0x6c>
 270:	9a 95       	dec	r25
 272:	66 0f       	add	r22, r22
 274:	77 1f       	adc	r23, r23
 276:	88 1f       	adc	r24, r24
 278:	da f7       	brpl	.-10     	; 0x270 <__floatsisf+0x62>
 27a:	88 0f       	add	r24, r24
 27c:	96 95       	lsr	r25
 27e:	87 95       	ror	r24
 280:	97 f9       	bld	r25, 7
 282:	08 95       	ret

00000284 <__fp_split3>:
 284:	57 fd       	sbrc	r21, 7
 286:	90 58       	subi	r25, 0x80	; 128
 288:	44 0f       	add	r20, r20
 28a:	55 1f       	adc	r21, r21
 28c:	59 f0       	breq	.+22     	; 0x2a4 <__fp_splitA+0x10>
 28e:	5f 3f       	cpi	r21, 0xFF	; 255
 290:	71 f0       	breq	.+28     	; 0x2ae <__fp_splitA+0x1a>
 292:	47 95       	ror	r20

00000294 <__fp_splitA>:
 294:	88 0f       	add	r24, r24
 296:	97 fb       	bst	r25, 7
 298:	99 1f       	adc	r25, r25
 29a:	61 f0       	breq	.+24     	; 0x2b4 <__fp_splitA+0x20>
 29c:	9f 3f       	cpi	r25, 0xFF	; 255
 29e:	79 f0       	breq	.+30     	; 0x2be <__fp_splitA+0x2a>
 2a0:	87 95       	ror	r24
 2a2:	08 95       	ret
 2a4:	12 16       	cp	r1, r18
 2a6:	13 06       	cpc	r1, r19
 2a8:	14 06       	cpc	r1, r20
 2aa:	55 1f       	adc	r21, r21
 2ac:	f2 cf       	rjmp	.-28     	; 0x292 <__fp_split3+0xe>
 2ae:	46 95       	lsr	r20
 2b0:	f1 df       	rcall	.-30     	; 0x294 <__fp_splitA>
 2b2:	08 c0       	rjmp	.+16     	; 0x2c4 <__fp_splitA+0x30>
 2b4:	16 16       	cp	r1, r22
 2b6:	17 06       	cpc	r1, r23
 2b8:	18 06       	cpc	r1, r24
 2ba:	99 1f       	adc	r25, r25
 2bc:	f1 cf       	rjmp	.-30     	; 0x2a0 <__fp_splitA+0xc>
 2be:	86 95       	lsr	r24
 2c0:	71 05       	cpc	r23, r1
 2c2:	61 05       	cpc	r22, r1
 2c4:	08 94       	sec
 2c6:	08 95       	ret

000002c8 <__fp_zero>:
 2c8:	e8 94       	clt

000002ca <__fp_szero>:
 2ca:	bb 27       	eor	r27, r27
 2cc:	66 27       	eor	r22, r22
 2ce:	77 27       	eor	r23, r23
 2d0:	cb 01       	movw	r24, r22
 2d2:	97 f9       	bld	r25, 7
 2d4:	08 95       	ret

000002d6 <_exit>:
 2d6:	f8 94       	cli

000002d8 <__stop_program>:
 2d8:	ff cf       	rjmp	.-2      	; 0x2d8 <__stop_program>
