
Arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000028c  00000320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000028c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d0  0080010a  0080010a  0000032a  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000032c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000090  00000000  00000000  000009f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00000a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000000b6  00000000  00000000  00000aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000335  00000000  00000000  00000b5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000001df  00000000  00000000  00000e93  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000002f0  00000000  00000000  00001072  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000070  00000000  00000000  00001364  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000015e  00000000  00000000  000013d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000091  00000000  00000000  00001532  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000043  00000000  00000000  000015c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000018  00000000  00000000  00001606  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 1a 01 	jmp	0x234	; 0x234 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e8       	ldi	r30, 0x8C	; 140
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 3d       	cpi	r26, 0xDA	; 218
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b2 00 	call	0x164	; 0x164 <main>
  9e:	0c 94 44 01 	jmp	0x288	; 0x288 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <txWrite>:
			_delay_ms(10);
		}		
    }	
}

void txWrite(uint8_t letters[]){	
  a6:	1f 93       	push	r17
    int i, cnt = strlen(letters);
  a8:	e8 2f       	mov	r30, r24
  aa:	f9 2f       	mov	r31, r25
  ac:	df 01       	movw	r26, r30
  ae:	0d 90       	ld	r0, X+
  b0:	00 20       	and	r0, r0
  b2:	e9 f7       	brne	.-6      	; 0xae <txWrite+0x8>
  b4:	ad 01       	movw	r20, r26
  b6:	41 50       	subi	r20, 0x01	; 1
  b8:	50 40       	sbci	r21, 0x00	; 0
  ba:	4e 1b       	sub	r20, r30
  bc:	5f 0b       	sbc	r21, r31
	
    for (i = 0; i < cnt; i++) {
  be:	14 16       	cp	r1, r20
  c0:	15 06       	cpc	r1, r21
  c2:	f4 f4       	brge	.+60     	; 0x100 <txWrite+0x5a>
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	90 e0       	ldi	r25, 0x00	; 0
        txBuffer[txPosWrite++] = letters[i];
  c8:	66 e7       	ldi	r22, 0x76	; 118
  ca:	71 e0       	ldi	r23, 0x01	; 1
  cc:	20 91 0a 01 	lds	r18, 0x010A
  d0:	30 91 0b 01 	lds	r19, 0x010B
  d4:	11 91       	ld	r17, Z+
  d6:	db 01       	movw	r26, r22
  d8:	a2 0f       	add	r26, r18
  da:	b3 1f       	adc	r27, r19
  dc:	1c 93       	st	X, r17
  de:	2f 5f       	subi	r18, 0xFF	; 255
  e0:	3f 4f       	sbci	r19, 0xFF	; 255
  e2:	30 93 0b 01 	sts	0x010B, r19
  e6:	20 93 0a 01 	sts	0x010A, r18
		
        if (txPosWrite >= SERIAL) {
  ea:	24 36       	cpi	r18, 0x64	; 100
  ec:	31 05       	cpc	r19, r1
  ee:	24 f0       	brlt	.+8      	; 0xf8 <txWrite+0x52>
            txPosWrite = 0;
  f0:	10 92 0b 01 	sts	0x010B, r1
  f4:	10 92 0a 01 	sts	0x010A, r1
}

void txWrite(uint8_t letters[]){	
    int i, cnt = strlen(letters);
	
    for (i = 0; i < cnt; i++) {
  f8:	01 96       	adiw	r24, 0x01	; 1
  fa:	48 17       	cp	r20, r24
  fc:	59 07       	cpc	r21, r25
  fe:	31 f7       	brne	.-52     	; 0xcc <txWrite+0x26>
        }
    }
	
    // UCSR0A. Регистр состояния передачи
    // UDRE0. Флаг в UCSR0A говорящий о том что буффер готов к принятию новых данных, когда 1
    if (UCSR0A & (1 << UDRE0)) {
 100:	80 91 c0 00 	lds	r24, 0x00C0
 104:	85 ff       	sbrs	r24, 5
 106:	02 c0       	rjmp	.+4      	; 0x10c <txWrite+0x66>
        UDR0 = 0;
 108:	10 92 c6 00 	sts	0x00C6, r1
    }	
}
 10c:	1f 91       	pop	r17
 10e:	08 95       	ret

00000110 <rxAvailable>:

uint8_t rxAvailable()
{
	return rxPosRead != rxPosWrite ? 1 : 0;	
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	40 91 10 01 	lds	r20, 0x0110
 116:	50 91 11 01 	lds	r21, 0x0111
 11a:	20 91 0e 01 	lds	r18, 0x010E
 11e:	30 91 0f 01 	lds	r19, 0x010F
 122:	42 17       	cp	r20, r18
 124:	53 07       	cpc	r21, r19
 126:	09 f4       	brne	.+2      	; 0x12a <rxAvailable+0x1a>
 128:	80 e0       	ldi	r24, 0x00	; 0
}
 12a:	08 95       	ret

0000012c <rxRead>:

uint8_t rxRead()
{
	uint8_t ret = '\0';
	
	if (rxAvailable() == 1) {
 12c:	0e 94 88 00 	call	0x110	; 0x110 <rxAvailable>
 130:	81 30       	cpi	r24, 0x01	; 1
 132:	b1 f4       	brne	.+44     	; 0x160 <rxRead+0x34>
		ret = rxBuffer[rxPosRead++];
 134:	20 91 10 01 	lds	r18, 0x0110
 138:	30 91 11 01 	lds	r19, 0x0111
 13c:	f9 01       	movw	r30, r18
 13e:	ee 5e       	subi	r30, 0xEE	; 238
 140:	fe 4f       	sbci	r31, 0xFE	; 254
 142:	80 81       	ld	r24, Z
 144:	2f 5f       	subi	r18, 0xFF	; 255
 146:	3f 4f       	sbci	r19, 0xFF	; 255
 148:	30 93 11 01 	sts	0x0111, r19
 14c:	20 93 10 01 	sts	0x0110, r18
		
		if (rxPosRead >= SERIAL) {
 150:	24 36       	cpi	r18, 0x64	; 100
 152:	31 05       	cpc	r19, r1
 154:	34 f0       	brlt	.+12     	; 0x162 <rxRead+0x36>
			rxPosRead = 0;
 156:	10 92 11 01 	sts	0x0111, r1
 15a:	10 92 10 01 	sts	0x0110, r1
 15e:	08 95       	ret
	return rxPosRead != rxPosWrite ? 1 : 0;	
}

uint8_t rxRead()
{
	uint8_t ret = '\0';
 160:	80 e0       	ldi	r24, 0x00	; 0
			rxPosRead = 0;
		}
	}
	
	return ret;
}
 162:	08 95       	ret

00000164 <main>:

uint8_t rxAvailable();
uint8_t rxRead();

int main(void)
{
 164:	1f 93       	push	r17
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
    // Разрешение глобальных прерываний
    sei();
 16a:	78 94       	sei
	
    // Usart Baud Rate register. Регистры настройки бод\сек
    UBRR0H = (BRC >> 8); // Записываем 8 старших бит
 16c:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = BRC; // Записываем 8 младших бит
 170:	87 e6       	ldi	r24, 0x67	; 103
 172:	80 93 c4 00 	sts	0x00C4, r24
	
    // Разрешаем прерывания USART
    UCSR0B = (1 << TXEN0); // Включаем передачу через USART, отключая работу порта в обычном режиме
 176:	e1 ec       	ldi	r30, 0xC1	; 193
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	88 e0       	ldi	r24, 0x08	; 8
 17c:	80 83       	st	Z, r24
	UCSR0B |= (1 << TXCIE0); // Разрешаем прерывание по завершение передачи байта
 17e:	80 81       	ld	r24, Z
 180:	80 64       	ori	r24, 0x40	; 64
 182:	80 83       	st	Z, r24
	UCSR0B |= (1 << RXEN0); // Включаем прием через USART
 184:	80 81       	ld	r24, Z
 186:	80 61       	ori	r24, 0x10	; 16
 188:	80 83       	st	Z, r24
	UCSR0B |= (1 << RXCIE0); // Разрешаем прерывание по завершении приема бита
 18a:	80 81       	ld	r24, Z
 18c:	80 68       	ori	r24, 0x80	; 128
 18e:	80 83       	st	Z, r24
    // Parity. Контрольный бит проверки четности двоичного числа
    // UCSR0C = (1 << UPM01); // Enable even parity
	
    // Control and status regiter n C.
    // Настройки данных 
    UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); // Character size. Размер пакета. 8 бит
 190:	86 e0       	ldi	r24, 0x06	; 6
 192:	80 93 c2 00 	sts	0x00C2, r24
	
	sbi(DDRB, PORTB2);
 196:	22 9a       	sbi	0x04, 2	; 4
	while(1) {		
		if (rxAvailable() == 1) {
			c = rxRead(); // \n Последний символ строки
			
			if (c != '\n') {
				txWrite("Received\n");
 198:	c0 e0       	ldi	r28, 0x00	; 0
 19a:	d1 e0       	ldi	r29, 0x01	; 1
	
	sbi(DDRB, PORTB2);
int8_t c;

	while(1) {		
		if (rxAvailable() == 1) {
 19c:	0e 94 88 00 	call	0x110	; 0x110 <rxAvailable>
 1a0:	81 30       	cpi	r24, 0x01	; 1
 1a2:	71 f4       	brne	.+28     	; 0x1c0 <main+0x5c>
			c = rxRead(); // \n Последний символ строки
 1a4:	0e 94 96 00 	call	0x12c	; 0x12c <rxRead>
 1a8:	18 2f       	mov	r17, r24
			
			if (c != '\n') {
 1aa:	8a 30       	cpi	r24, 0x0A	; 10
 1ac:	b9 f3       	breq	.-18     	; 0x19c <main+0x38>
				txWrite("Received\n");
 1ae:	ce 01       	movw	r24, r28
 1b0:	0e 94 53 00 	call	0xa6	; 0xa6 <txWrite>
			
				if (c == '1') {
 1b4:	11 33       	cpi	r17, 0x31	; 49
 1b6:	11 f4       	brne	.+4      	; 0x1bc <main+0x58>
					sbi(PORTB, PORTB2);
 1b8:	2a 9a       	sbi	0x05, 2	; 5
 1ba:	f0 cf       	rjmp	.-32     	; 0x19c <main+0x38>
				} else {
					cbi(PORTB, PORTB2);
 1bc:	2a 98       	cbi	0x05, 2	; 5
 1be:	ee cf       	rjmp	.-36     	; 0x19c <main+0x38>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c0:	83 ec       	ldi	r24, 0xC3	; 195
 1c2:	99 e0       	ldi	r25, 0x09	; 9
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <main+0x60>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <main+0x66>
 1ca:	00 00       	nop
 1cc:	e7 cf       	rjmp	.-50     	; 0x19c <main+0x38>

000001ce <__vector_20>:
	
	return ret;
}

// Прерывания завершения передачи байта
ISR(USART_TX_vect) {
 1ce:	1f 92       	push	r1
 1d0:	0f 92       	push	r0
 1d2:	0f b6       	in	r0, 0x3f	; 63
 1d4:	0f 92       	push	r0
 1d6:	11 24       	eor	r1, r1
 1d8:	2f 93       	push	r18
 1da:	3f 93       	push	r19
 1dc:	8f 93       	push	r24
 1de:	9f 93       	push	r25
 1e0:	ef 93       	push	r30
 1e2:	ff 93       	push	r31
    // Если есть что передавать
    if (txPosRead != txPosWrite) {
 1e4:	80 91 0c 01 	lds	r24, 0x010C
 1e8:	90 91 0d 01 	lds	r25, 0x010D
 1ec:	20 91 0a 01 	lds	r18, 0x010A
 1f0:	30 91 0b 01 	lds	r19, 0x010B
 1f4:	82 17       	cp	r24, r18
 1f6:	93 07       	cpc	r25, r19
 1f8:	91 f0       	breq	.+36     	; 0x21e <__vector_20+0x50>
        // Установка байта в UDR0 автоматически передает его через USART
        UDR0 = txBuffer[txPosRead++];
 1fa:	fc 01       	movw	r30, r24
 1fc:	ea 58       	subi	r30, 0x8A	; 138
 1fe:	fe 4f       	sbci	r31, 0xFE	; 254
 200:	20 81       	ld	r18, Z
 202:	20 93 c6 00 	sts	0x00C6, r18
 206:	01 96       	adiw	r24, 0x01	; 1
 208:	90 93 0d 01 	sts	0x010D, r25
 20c:	80 93 0c 01 	sts	0x010C, r24
		
        if (txPosRead >= SERIAL) {
 210:	84 36       	cpi	r24, 0x64	; 100
 212:	91 05       	cpc	r25, r1
 214:	24 f0       	brlt	.+8      	; 0x21e <__vector_20+0x50>
           txPosRead = 0;
 216:	10 92 0d 01 	sts	0x010D, r1
 21a:	10 92 0c 01 	sts	0x010C, r1
        }
    }	
}
 21e:	ff 91       	pop	r31
 220:	ef 91       	pop	r30
 222:	9f 91       	pop	r25
 224:	8f 91       	pop	r24
 226:	3f 91       	pop	r19
 228:	2f 91       	pop	r18
 22a:	0f 90       	pop	r0
 22c:	0f be       	out	0x3f, r0	; 63
 22e:	0f 90       	pop	r0
 230:	1f 90       	pop	r1
 232:	18 95       	reti

00000234 <__vector_18>:

// Прерывания завершения приема байта
ISR(USART_RX_vect) {
 234:	1f 92       	push	r1
 236:	0f 92       	push	r0
 238:	0f b6       	in	r0, 0x3f	; 63
 23a:	0f 92       	push	r0
 23c:	11 24       	eor	r1, r1
 23e:	2f 93       	push	r18
 240:	8f 93       	push	r24
 242:	9f 93       	push	r25
 244:	ef 93       	push	r30
 246:	ff 93       	push	r31
	// Чтение из регистра приводит к получению данных
	rxBuffer[rxPosWrite++] = UDR0;
 248:	80 91 0e 01 	lds	r24, 0x010E
 24c:	90 91 0f 01 	lds	r25, 0x010F
 250:	20 91 c6 00 	lds	r18, 0x00C6
 254:	fc 01       	movw	r30, r24
 256:	ee 5e       	subi	r30, 0xEE	; 238
 258:	fe 4f       	sbci	r31, 0xFE	; 254
 25a:	20 83       	st	Z, r18
 25c:	01 96       	adiw	r24, 0x01	; 1
 25e:	90 93 0f 01 	sts	0x010F, r25
 262:	80 93 0e 01 	sts	0x010E, r24
	
	if (rxPosWrite >= SERIAL) {
 266:	84 36       	cpi	r24, 0x64	; 100
 268:	91 05       	cpc	r25, r1
 26a:	24 f0       	brlt	.+8      	; 0x274 <__vector_18+0x40>
		rxPosWrite = 0;
 26c:	10 92 0f 01 	sts	0x010F, r1
 270:	10 92 0e 01 	sts	0x010E, r1
	}
 274:	ff 91       	pop	r31
 276:	ef 91       	pop	r30
 278:	9f 91       	pop	r25
 27a:	8f 91       	pop	r24
 27c:	2f 91       	pop	r18
 27e:	0f 90       	pop	r0
 280:	0f be       	out	0x3f, r0	; 63
 282:	0f 90       	pop	r0
 284:	1f 90       	pop	r1
 286:	18 95       	reti

00000288 <_exit>:
 288:	f8 94       	cli

0000028a <__stop_program>:
 28a:	ff cf       	rjmp	.-2      	; 0x28a <__stop_program>
