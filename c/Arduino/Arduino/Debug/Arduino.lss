
Arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000190  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000097  00000000  00000000  0000085c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  000008f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000002a  00000000  00000000  00000913  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000213  00000000  00000000  0000093d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000013b  00000000  00000000  00000b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000209  00000000  00000000  00000c8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000030  00000000  00000000  00000e94  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000f0  00000000  00000000  00000ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000033  00000000  00000000  00000fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 00000043  00000000  00000000  00000fe7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 40 00 	jmp	0x80	; 0x80 <__vector_2>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 7c 00 	call	0xf8	; 0xf8 <main>
  78:	0c 94 9c 00 	jmp	0x138	; 0x138 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <__vector_2>:
#include <avr/interrupt.h>
#include <avr/sfr_defs.h>

#define F_CPU 16E6

ISR(INT1_vect) {
  80:	1f 92       	push	r1
  82:	0f 92       	push	r0
  84:	0f b6       	in	r0, 0x3f	; 63
  86:	0f 92       	push	r0
  88:	11 24       	eor	r1, r1
  8a:	0f 93       	push	r16
  8c:	1f 93       	push	r17
  8e:	2f 93       	push	r18
  90:	3f 93       	push	r19
  92:	4f 93       	push	r20
  94:	5f 93       	push	r21
  96:	6f 93       	push	r22
  98:	7f 93       	push	r23
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
	int8_t i, temp = PORTB;
  9e:	75 b1       	in	r23, 0x05	; 5
	PORTB = 0;
  a0:	15 b8       	out	0x05, r1	; 5
  a2:	80 e0       	ldi	r24, 0x00	; 0
  a4:	90 e0       	ldi	r25, 0x00	; 0
	
	for (i = 0; i <= 6; i++) {
		PORTB |= 1 << i;
  a6:	41 e0       	ldi	r20, 0x01	; 1
  a8:	50 e0       	ldi	r21, 0x00	; 0
  aa:	65 b1       	in	r22, 0x05	; 5
  ac:	9a 01       	movw	r18, r20
  ae:	08 2e       	mov	r0, r24
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <__vector_2+0x36>
  b2:	22 0f       	add	r18, r18
  b4:	33 1f       	adc	r19, r19
  b6:	0a 94       	dec	r0
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <__vector_2+0x32>
  ba:	26 2b       	or	r18, r22
  bc:	25 b9       	out	0x05, r18	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	0f eb       	ldi	r16, 0xBF	; 191
  c0:	17 e2       	ldi	r17, 0x27	; 39
  c2:	29 e0       	ldi	r18, 0x09	; 9
  c4:	01 50       	subi	r16, 0x01	; 1
  c6:	10 40       	sbci	r17, 0x00	; 0
  c8:	20 40       	sbci	r18, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <__vector_2+0x44>
  cc:	00 c0       	rjmp	.+0      	; 0xce <__vector_2+0x4e>
  ce:	00 00       	nop
  d0:	01 96       	adiw	r24, 0x01	; 1

ISR(INT1_vect) {
	int8_t i, temp = PORTB;
	PORTB = 0;
	
	for (i = 0; i <= 6; i++) {
  d2:	87 30       	cpi	r24, 0x07	; 7
  d4:	91 05       	cpc	r25, r1
  d6:	49 f7       	brne	.-46     	; 0xaa <__vector_2+0x2a>
		PORTB |= 1 << i;
		_delay_ms(3000);
	}
	
	PORTB = temp;
  d8:	75 b9       	out	0x05, r23	; 5
}
  da:	9f 91       	pop	r25
  dc:	8f 91       	pop	r24
  de:	7f 91       	pop	r23
  e0:	6f 91       	pop	r22
  e2:	5f 91       	pop	r21
  e4:	4f 91       	pop	r20
  e6:	3f 91       	pop	r19
  e8:	2f 91       	pop	r18
  ea:	1f 91       	pop	r17
  ec:	0f 91       	pop	r16
  ee:	0f 90       	pop	r0
  f0:	0f be       	out	0x3f, r0	; 63
  f2:	0f 90       	pop	r0
  f4:	1f 90       	pop	r1
  f6:	18 95       	reti

000000f8 <main>:

int main(void)
{
	DDRB  = 0xFF;
  f8:	8f ef       	ldi	r24, 0xFF	; 255
  fa:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
  fc:	15 b8       	out	0x05, r1	; 5
	
	EICRA |= (1<<ISC11);
  fe:	e9 e6       	ldi	r30, 0x69	; 105
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	88 60       	ori	r24, 0x08	; 8
 106:	80 83       	st	Z, r24
	EIMSK |= (1<<INT1);
 108:	e9 9a       	sbi	0x1d, 1	; 29
	
	sei();
 10a:	78 94       	sei
	
    while(1)
    {
		PORTB = 0b00111111;
 10c:	8f e3       	ldi	r24, 0x3F	; 63
 10e:	85 b9       	out	0x05, r24	; 5
 110:	2f e3       	ldi	r18, 0x3F	; 63
 112:	3d e0       	ldi	r19, 0x0D	; 13
 114:	43 e0       	ldi	r20, 0x03	; 3
 116:	21 50       	subi	r18, 0x01	; 1
 118:	30 40       	sbci	r19, 0x00	; 0
 11a:	40 40       	sbci	r20, 0x00	; 0
 11c:	e1 f7       	brne	.-8      	; 0x116 <main+0x1e>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <main+0x28>
 120:	00 00       	nop
		_delay_ms(1000);
		PORTB = 0;
 122:	15 b8       	out	0x05, r1	; 5
 124:	2f e3       	ldi	r18, 0x3F	; 63
 126:	3d e0       	ldi	r19, 0x0D	; 13
 128:	43 e0       	ldi	r20, 0x03	; 3
 12a:	21 50       	subi	r18, 0x01	; 1
 12c:	30 40       	sbci	r19, 0x00	; 0
 12e:	40 40       	sbci	r20, 0x00	; 0
 130:	e1 f7       	brne	.-8      	; 0x12a <main+0x32>
 132:	00 c0       	rjmp	.+0      	; 0x134 <main+0x3c>
 134:	00 00       	nop
 136:	eb cf       	rjmp	.-42     	; 0x10e <main+0x16>

00000138 <_exit>:
 138:	f8 94       	cli

0000013a <__stop_program>:
 13a:	ff cf       	rjmp	.-2      	; 0x13a <__stop_program>
