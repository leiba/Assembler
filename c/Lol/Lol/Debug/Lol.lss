
Lol.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000166  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000166  000001fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800066  00800066  00000200  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  000008cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  00000963  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000053  00000000  00000000  000009a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000457  00000000  00000000  000009f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000002a1  00000000  00000000  00000e4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000392  00000000  00000000  000010ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000040  00000000  00000000  00001480  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000161  00000000  00000000  000014c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000094  00000000  00000000  00001621  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000007b  00000000  00000000  000016b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000010  00000000  00000000  00001730  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e6       	ldi	r30, 0x66	; 102
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 36       	cpi	r26, 0x6C	; 108
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 b1 00 	jmp	0x162	; 0x162 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include <avr/io.h>
#include <stdio.h>

int main(void)
{
  92:	af 92       	push	r10
  94:	bf 92       	push	r11
  96:	cf 92       	push	r12
  98:	df 92       	push	r13
  9a:	ef 92       	push	r14
  9c:	ff 92       	push	r15
  9e:	0f 93       	push	r16
  a0:	1f 93       	push	r17
  a2:	df 93       	push	r29
  a4:	cf 93       	push	r28
  a6:	00 d0       	rcall	.+0      	; 0xa8 <main+0x16>
  a8:	00 d0       	rcall	.+0      	; 0xaa <main+0x18>
  aa:	00 d0       	rcall	.+0      	; 0xac <main+0x1a>
  ac:	cd b7       	in	r28, 0x3d	; 61
  ae:	de b7       	in	r29, 0x3e	; 62
	char str[] = "12345";
  b0:	de 01       	movw	r26, r28
  b2:	11 96       	adiw	r26, 0x01	; 1
  b4:	e0 e6       	ldi	r30, 0x60	; 96
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	86 e0       	ldi	r24, 0x06	; 6
  ba:	01 90       	ld	r0, Z+
  bc:	0d 92       	st	X+, r0
  be:	81 50       	subi	r24, 0x01	; 1
  c0:	e1 f7       	brne	.-8      	; 0xba <main+0x28>
	int i = 0;
	
	UBRRH = 25;
  c2:	89 e1       	ldi	r24, 0x19	; 25
  c4:	80 bd       	out	0x20, r24	; 32
    UCSRB = 0x18; // UCR
  c6:	88 e1       	ldi	r24, 0x18	; 24
  c8:	8a b9       	out	0x0a, r24	; 10
#include <stdio.h>

int main(void)
{
	char str[] = "12345";
	int i = 0;
  ca:	00 e0       	ldi	r16, 0x00	; 0
  cc:	10 e0       	ldi	r17, 0x00	; 0
    {
		if (i > 4) {
			i = 0;
		}	
		        
	    putchar(str[i++]);
  ce:	7e 01       	movw	r14, r28
  d0:	08 94       	sec
  d2:	e1 1c       	adc	r14, r1
  d4:	f1 1c       	adc	r15, r1
  d6:	0f 2e       	mov	r0, r31
  d8:	f8 e6       	ldi	r31, 0x68	; 104
  da:	cf 2e       	mov	r12, r31
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	df 2e       	mov	r13, r31
  e0:	f0 2d       	mov	r31, r0
    UCSRB = 0x18; // UCR
	
    while(1)
    {
		if (i > 4) {
			i = 0;
  e2:	aa 24       	eor	r10, r10
  e4:	bb 24       	eor	r11, r11
  e6:	01 c0       	rjmp	.+2      	; 0xea <main+0x58>
  e8:	85 01       	movw	r16, r10
		}	
		        
	    putchar(str[i++]);
  ea:	f7 01       	movw	r30, r14
  ec:	e0 0f       	add	r30, r16
  ee:	f1 1f       	adc	r31, r17
  f0:	0f 5f       	subi	r16, 0xFF	; 255
  f2:	1f 4f       	sbci	r17, 0xFF	; 255
  f4:	d6 01       	movw	r26, r12
  f6:	6d 91       	ld	r22, X+
  f8:	7c 91       	ld	r23, X
  fa:	80 81       	ld	r24, Z
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 85 00 	call	0x10a	; 0x10a <fputc>
	UBRRH = 25;
    UCSRB = 0x18; // UCR
	
    while(1)
    {
		if (i > 4) {
 102:	05 30       	cpi	r16, 0x05	; 5
 104:	11 05       	cpc	r17, r1
 106:	84 f7       	brge	.-32     	; 0xe8 <main+0x56>
 108:	f0 cf       	rjmp	.-32     	; 0xea <main+0x58>

0000010a <fputc>:
 10a:	0f 93       	push	r16
 10c:	1f 93       	push	r17
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	8c 01       	movw	r16, r24
 114:	eb 01       	movw	r28, r22
 116:	8b 81       	ldd	r24, Y+3	; 0x03
 118:	81 ff       	sbrs	r24, 1
 11a:	1b c0       	rjmp	.+54     	; 0x152 <fputc+0x48>
 11c:	82 ff       	sbrs	r24, 2
 11e:	0d c0       	rjmp	.+26     	; 0x13a <fputc+0x30>
 120:	2e 81       	ldd	r18, Y+6	; 0x06
 122:	3f 81       	ldd	r19, Y+7	; 0x07
 124:	8c 81       	ldd	r24, Y+4	; 0x04
 126:	9d 81       	ldd	r25, Y+5	; 0x05
 128:	28 17       	cp	r18, r24
 12a:	39 07       	cpc	r19, r25
 12c:	64 f4       	brge	.+24     	; 0x146 <fputc+0x3c>
 12e:	e8 81       	ld	r30, Y
 130:	f9 81       	ldd	r31, Y+1	; 0x01
 132:	01 93       	st	Z+, r16
 134:	f9 83       	std	Y+1, r31	; 0x01
 136:	e8 83       	st	Y, r30
 138:	06 c0       	rjmp	.+12     	; 0x146 <fputc+0x3c>
 13a:	e8 85       	ldd	r30, Y+8	; 0x08
 13c:	f9 85       	ldd	r31, Y+9	; 0x09
 13e:	80 2f       	mov	r24, r16
 140:	09 95       	icall
 142:	00 97       	sbiw	r24, 0x00	; 0
 144:	31 f4       	brne	.+12     	; 0x152 <fputc+0x48>
 146:	8e 81       	ldd	r24, Y+6	; 0x06
 148:	9f 81       	ldd	r25, Y+7	; 0x07
 14a:	01 96       	adiw	r24, 0x01	; 1
 14c:	9f 83       	std	Y+7, r25	; 0x07
 14e:	8e 83       	std	Y+6, r24	; 0x06
 150:	02 c0       	rjmp	.+4      	; 0x156 <fputc+0x4c>
 152:	0f ef       	ldi	r16, 0xFF	; 255
 154:	1f ef       	ldi	r17, 0xFF	; 255
 156:	c8 01       	movw	r24, r16
 158:	df 91       	pop	r29
 15a:	cf 91       	pop	r28
 15c:	1f 91       	pop	r17
 15e:	0f 91       	pop	r16
 160:	08 95       	ret

00000162 <_exit>:
 162:	f8 94       	cli

00000164 <__stop_program>:
 164:	ff cf       	rjmp	.-2      	; 0x164 <__stop_program>
